version: '3.8'

services:
  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - uploads:/tmp/uploads
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fintune
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URL=${MONGODB_URL}
      - MONGODB_DB=${MONGODB_DB}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
    depends_on:
      - db
      - redis
    networks:
      - fintune-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - api
    networks:
      - fintune-network

  # Celery worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - uploads:/tmp/uploads
    command: celery -A app.core.celery_app worker --loglevel=info
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fintune
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - redis
    networks:
      - fintune-network

  # PostgreSQL database
  db:
    image: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fintune
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fintune-network

  # Redis for Celery
  redis:
    image: redis
    ports:
      - "6381:6379"
    volumes:
      - redis-data:/data
    networks:
      - fintune-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - fintune-network

  # Nouveau service : reverse proxy
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    depends_on:
      - frontend
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Montre un exemple de volumes pour stocker vos certificats SSL
      - ./frontend/certs:/etc/nginx/certs
      - ./frontend/conf.d:/etc/nginx/conf.d
    networks:
      - fintune-network
    # On n'expose PAS le code source dedans, on utilise juste la config Nginx

networks:
  fintune-network:
    driver: bridge

volumes:
  postgres_data:
  redis-data:
  pgadmin-data:
  uploads: